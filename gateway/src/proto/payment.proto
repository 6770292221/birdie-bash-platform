syntax = "proto3";

package payment;

// Payment service definition
service PaymentService {
  // Issue charges for a payment (PromptPay only for now)
  rpc IssueCharges(ChargeRequest) returns (PaymentResponse);

  // Get payment status
  rpc GetPaymentStatus(PaymentStatusRequest) returns (PaymentStatusResponse);

  // Get payments for a player
  rpc GetPlayerPayments(PlayerPaymentsRequest) returns (PlayerPaymentsResponse);

  // Get payments for an event
  rpc GetEventPayments(EventPaymentsRequest) returns (EventPaymentsResponse);
}

// Request messages
message ChargeRequest {
  string event_id = 1;
  string player_id = 2;          
  double amount = 3;
  string currency = 4;             // optional (defaults to thb)
  string description = 5;          // optional
  string payment_method = 6;       // optional (defaults to PROMPT_PAY)
}

message PaymentStatusRequest {
  string payment_id = 1;
}

message PlayerPaymentsRequest {
  string player_id = 1;
  string status = 2; // Optional filter
  string event_id = 3; // Optional filter
}

message EventPaymentsRequest {
  string event_id = 1;
  string status = 2; // Optional filter
}

// Response messages
message PaymentResponse {
  string id = 1;
  string status = 2;
  double amount = 3;
  string currency = 4;
  // field 5 (payment_intent_id) removed/reserved
  string qr_code_uri = 6;
  string error_message = 7;
  string created_at = 8;
  string updated_at = 9;
}

message PaymentStatusResponse {
  string payment_id = 1;
  string status = 2;
  double amount = 3;
  string currency = 4;
  string event_id = 5;
  string player_id = 6;
  string created_at = 7;
  string updated_at = 8;
  repeated PaymentTransaction transactions = 9;
}

message PlayerPaymentsResponse {
  repeated PaymentSummary payments = 1;
}

message EventPaymentsResponse {
  repeated EventPaymentSummary payments = 1;
}

message PaymentSummary {
  string payment_id = 1;
  string status = 2;
  double amount = 3;
  string currency = 4;
  string qr_code_uri = 5;
  string event_id = 6;
  string created_at = 7;
  string updated_at = 8;
}

message EventPaymentSummary {
  string player_id = 1;
  double amount = 2;
  string status = 3;
}

message PaymentTransaction {
  string id = 1;
  TransactionType type = 2;
  double amount = 3;
  string status = 4;
  string transaction_id = 5;
  string timestamp = 6;
}

enum TransactionType {
  CHARGE = 0;
}