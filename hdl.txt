title Birdie Bash Platform - Complete Microservices Architecture

// ---------- Users / Clients ----------
Users [icon: users, color: gray] {
  Organizer [icon: user, color: red]
  Player [icon: user, color: green]
  Web Client [icon: monitor, color: blue, label: "React Frontend\n(Port 9001)"]
}

// ---------- Ingress ----------
Gateway [icon: aws-api-gateway, color: orange, label: "API Gateway\n(Port 3000)"]

// ---------- Core Services ----------
Auth Service [icon: lock, color: blue, label: "AUTH SERVICE\n(Port 3001)"] {
  AuthDB [icon: mongodb, color: green, label: "MongoDB Cloud: users"]
}

Event Service [icon: calendar, color: blue, label: "EVENT SERVICE\n(Port 3003)"] {
  EventDB [icon: mongodb, color: green, label: "MongoDB Cloud: events"]
  Capacity Worker [icon: server, color: purple, label: "capacity-worker"]
  Event Status Scheduler [icon: clock, color: red, label: "event-status-scheduler"]
}

Registration Service [icon: edit, color: blue, label: "REGISTRATION SERVICE\n(Port 3005)"] {
  RegDB [icon: mongodb, color: green, label: "MongoDB Cloud: registrations"]
  Waitlist Worker [icon: server, color: purple, label: "waitlist-worker"]
}

Settlement Service [icon: dollar-sign, color: blue, label: "SETTLEMENT SERVICE\n(Port 3006)"] {
  SettleDB [icon: mongodb, color: green, label: "MongoDB Cloud: settlements"]
}

// ---------- Business Services ----------
Matching Service [icon: shuffle, color: orange, label: "MATCHING SERVICE\n(Future Implementation)"] {
  MatchingDB [icon: mongodb, color: green, label: "MongoDB: matching"]
}

Notification Service [icon: bell, color: orange, label: "NOTIFICATION SERVICE\n(Future Implementation)"] {
  NotificationDB [icon: mongodb, color: green, label: "MongoDB: notifications"]
  Notification Worker [icon: server, color: purple, label: "notification-worker"]
}

Payment Service [icon: credit-card, color: orange, label: "PAYMENT SERVICE\n(Future Implementation)"] {
  PayDB [icon: mysql, color: blue, label: "MySQL: payments"]
  Payment Worker [icon: server, color: purple, label: "payment-worker"]
}

// ---------- Message Queue ----------
RabbitMQ [icon: rabbitmq, color: purple, label: "RabbitMQ\n(Port 5672)"]

// ---------- Infrastructure ----------
MongoDB Cloud [icon: mongodb, color: green, label: "MongoDB Atlas"]
MySQL [icon: mysql, color: blue, label: "MySQL\n(Port 3306)"]

// ---------- External Services ----------
Stripe API [icon: credit-card, color: gray, label: "Stripe Payment"]
LINE API [icon: message-circle, color: green, label: "LINE Messaging"]
SMS Provider [icon: message-square, color: orange, label: "SMS Gateway"]

// ---------- Connections ----------

// Users to Frontend
Organizer > Web Client
Player > Web Client

// Frontend to Gateway
Web Client > Gateway: HTTPS REST

// Gateway to Services
Gateway > Auth Service: REST /api/auth/*
Gateway > Event Service: REST /api/events/*
Gateway > Registration Service: REST /api/registrations/*
Gateway > Settlement Service: REST /api/settlements/*
Gateway > Matching Service: REST /api/matching/*
Gateway > Notification Service: REST /api/notifications/*
Gateway > Payment Service: REST /api/payments/*

// Service-to-Service Communication
Registration Service > Event Service: GET /api/events/{id}
Settlement Service > Event Service: GET /api/events/{id}
Matching Service > Event Service: GET /api/events/{id}
Payment Service > Settlement Service: POST /api/settlements

// Event Service <-> RabbitMQ
Event Service --> RabbitMQ: event.created
Event Service --> RabbitMQ: event.updated
Event Service --> RabbitMQ: event.deleted
Event Service --> RabbitMQ: event.capacity.updated
Event Service <-- RabbitMQ: event.participant.joined
Event Service <-- RabbitMQ: event.participant.cancelled

// Registration Service <-> RabbitMQ
Registration Service --> RabbitMQ: event.participant.joined
Registration Service --> RabbitMQ: event.participant.cancelled
Registration Service --> RabbitMQ: event.waitlist.promoted

// Settlement Service <-> RabbitMQ
Settlement Service --> RabbitMQ: settlement.created
Settlement Service --> RabbitMQ: settlement.completed
Settlement Service <-- RabbitMQ: payment.completed

// Notification Service <-> RabbitMQ
Notification Service --> RabbitMQ: notification.sent
Notification Service <-- RabbitMQ: event.participant.joined
Notification Service <-- RabbitMQ: event.waitlist.promoted
Notification Service <-- RabbitMQ: payment.completed

// Payment Service <-> RabbitMQ
Payment Service --> RabbitMQ: payment.created
Payment Service --> RabbitMQ: payment.completed
Payment Service --> RabbitMQ: payment.failed
Payment Service <-- RabbitMQ: settlement.created

// Matching Service <-> RabbitMQ
Matching Service --> RabbitMQ: match.created
Matching Service --> RabbitMQ: match.completed
Matching Service <-- RabbitMQ: event.completed

// Workers <-> RabbitMQ
Capacity Worker <-- RabbitMQ: event.participant.joined
Capacity Worker <-- RabbitMQ: event.participant.cancelled
Waitlist Worker <-- RabbitMQ: event.capacity.updated
Notification Worker <-- RabbitMQ: event.participant.joined
Notification Worker <-- RabbitMQ: event.waitlist.promoted
Payment Worker <-- RabbitMQ: settlement.created

// External Integrations
Payment Service > Stripe API: Create Payment
Stripe API > Payment Service: Webhook Payment Status
Notification Worker > LINE API: Send Message
Notification Worker > SMS Provider: Send SMS

// Database Connections
Auth Service -- AuthDB
Event Service -- EventDB
Registration Service -- RegDB
Settlement Service -- SettleDB
Matching Service -- MatchingDB
Notification Service -- NotificationDB
Payment Service -- PayDB